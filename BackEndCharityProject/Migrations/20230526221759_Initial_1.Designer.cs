// <auto-generated />
using System;
using BackEndCharityProject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackEndCharityProject.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230526221759_Initial_1")]
    partial class Initial_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackEndCharityProject.Models.Posts.Additional.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PostHelpsId")
                        .HasColumnType("int");

                    b.Property<int?>("PostVolunteersId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PostHelpsId");

                    b.HasIndex("PostVolunteersId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("BackEndCharityProject.Models.Posts.Additional.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PostHelpsId")
                        .HasColumnType("int");

                    b.Property<int?>("PostVolunteersId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PostHelpsId");

                    b.HasIndex("PostVolunteersId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("BackEndCharityProject.Models.Posts.PostHelp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Lattitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longtitude")
                        .HasColumnType("float");

                    b.Property<int?>("Money")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("PostsHelp");
                });

            modelBuilder.Entity("BackEndCharityProject.Models.Posts.PostVolunteer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Donated")
                        .HasColumnType("int");

                    b.Property<int>("Goal")
                        .HasColumnType("int");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Lattitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longtitude")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("PostsVolunteer");
                });

            modelBuilder.Entity("BackEndCharityProject.Models.Posts.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserOriginId")
                        .HasColumnType("int");

                    b.Property<int>("UserVoteId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("UserOriginId");

                    b.HasIndex("UserVoteId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("BackEndCharityProject.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BackEndCharityProject.Models.Posts.Additional.Image", b =>
                {
                    b.HasOne("BackEndCharityProject.Models.Posts.PostHelp", "PostHelps")
                        .WithMany("Images")
                        .HasForeignKey("PostHelpsId");

                    b.HasOne("BackEndCharityProject.Models.Posts.PostVolunteer", "PostVolunteers")
                        .WithMany("Images")
                        .HasForeignKey("PostVolunteersId");

                    b.Navigation("PostHelps");

                    b.Navigation("PostVolunteers");
                });

            modelBuilder.Entity("BackEndCharityProject.Models.Posts.Additional.Tag", b =>
                {
                    b.HasOne("BackEndCharityProject.Models.Posts.PostHelp", "PostHelps")
                        .WithMany("Tags")
                        .HasForeignKey("PostHelpsId");

                    b.HasOne("BackEndCharityProject.Models.Posts.PostVolunteer", "PostVolunteers")
                        .WithMany("Tags")
                        .HasForeignKey("PostVolunteersId");

                    b.Navigation("PostHelps");

                    b.Navigation("PostVolunteers");
                });

            modelBuilder.Entity("BackEndCharityProject.Models.Posts.PostHelp", b =>
                {
                    b.HasOne("BackEndCharityProject.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEndCharityProject.Models.Posts.PostVolunteer", b =>
                {
                    b.HasOne("BackEndCharityProject.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEndCharityProject.Models.Posts.Rating", b =>
                {
                    b.HasOne("BackEndCharityProject.Models.User", "UserOrigin")
                        .WithMany("Ratings")
                        .HasForeignKey("UserOriginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndCharityProject.Models.User", "UserVote")
                        .WithMany()
                        .HasForeignKey("UserVoteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UserOrigin");

                    b.Navigation("UserVote");
                });

            modelBuilder.Entity("BackEndCharityProject.Models.Posts.PostHelp", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("BackEndCharityProject.Models.Posts.PostVolunteer", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("BackEndCharityProject.Models.User", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
